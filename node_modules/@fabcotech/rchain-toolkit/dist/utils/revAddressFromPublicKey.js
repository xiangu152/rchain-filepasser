"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.revAddressFromPublicKey = void 0;
const keccak256_1 = require("@ethersproject/keccak256");
const blakejs_1 = require("blakejs");
const base58 = __importStar(require("../base58"));
const ethAddressFromPublicKey_1 = require("./ethAddressFromPublicKey");
const bytesFromHex_1 = require("./bytesFromHex");
const toBase58 = (hexStr) => {
    const bytes = (0, bytesFromHex_1.bytesFromHex)(hexStr);
    return base58.encode(bytes);
};
// Address and public key
// Algorithm to generate ETH and REV address is taken from RNode source
// https://github.com/rchain/rchain/blob/bf7a30e1d388d46aa9e5f4b8c04089fc8e31d771/rholang/src/main/scala/coop/rchain/rholang/interpreter/util/AddressTools.scala#L47
// Prefix as defined in https://github.com/rchain/rchain/blob/c6721a6/rholang/src/main/scala/coop/rchain/rholang/interpreter/util/RevAddress.scala#L13
const prefix = { coinId: "000000", version: "00" };
const getAddrFromEth = (ethAddr) => {
    if (!ethAddr || ethAddr.length !== 40) {
        throw new Error("ETH address must contain 130 characters");
    }
    // Hash ETH address
    const ethAddrBytes = (0, bytesFromHex_1.bytesFromHex)(ethAddr);
    const ethHash = (0, keccak256_1.keccak256)(ethAddrBytes).slice(2);
    // Add prefix with hash and calculate checksum (blake2b-256 hash)
    const payload = `${prefix.coinId}${prefix.version}${ethHash}`;
    const payloadBytes = (0, bytesFromHex_1.bytesFromHex)(payload);
    const checksum = (0, blakejs_1.blake2bHex)(payloadBytes, void 666, 32).slice(0, 8);
    // Return REV address
    return toBase58(`${payload}${checksum}`);
};
const revAddressFromPublicKey = (publicKey) => {
    const ethAddressWithoutPrefix = (0, ethAddressFromPublicKey_1.ethAddressFromPublicKey)(publicKey).slice(2);
    return getAddrFromEth(ethAddressWithoutPrefix);
};
exports.revAddressFromPublicKey = revAddressFromPublicKey;
//# sourceMappingURL=revAddressFromPublicKey.js.map