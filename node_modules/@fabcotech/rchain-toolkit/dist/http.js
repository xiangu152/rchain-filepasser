"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dataAtNameByBlockHash = exports.dataAtName = exports.prepareDeploy = exports.blocks = exports.exploreDeploy = exports.validAfterBlockNumber = exports.status = exports.easyDeploy = exports.deploy = void 0;
const utils_1 = require("./utils");
const https = __importStar(require("https"));
const http = __importStar(require("http"));
const validateUrl = (options) => {
    if (options.url.startsWith("http://")) {
        return {
            protocol: "http",
            lib: http,
            options: {
                host: options.url.substr(7).split(":")[0],
                port: options.url.substr(7).split(":")[1],
            },
        };
    }
    else if (options.url.startsWith("https://")) {
        return {
            protocol: "https",
            lib: https,
            options: {
                host: options.url.substr(8).split(":")[0],
                port: options.url.substr(8).split(":")[1],
                rejectUnauthorized: options.rejectUnauthorized,
                cert: options.cert,
                ca: options.ca,
            },
        };
    }
    else {
        throw new Error("URL most be http://ip_or_domain:port or https://ip_or_domain:port");
    }
};
const deploy = (urlOrOptions, options, timeout = undefined) => __awaiter(void 0, void 0, void 0, function* () {
    let urlValidated;
    if (typeof urlOrOptions === "string") {
        urlValidated = validateUrl({ url: urlOrOptions });
    }
    else {
        urlValidated = validateUrl(urlOrOptions);
    }
    const uv = urlValidated;
    if (typeof timeout === 'number') {
        if ((options.data.term || '').indexOf("(`rho:rchain:deployId`)") === -1) {
            console.warn('timeout is set and term does not include (`rho:rchain:deployId`), data-at-name may not work');
        }
    }
    return new Promise((resolve, reject) => {
        const req = uv.lib.request(Object.assign(Object.assign(Object.assign(Object.assign({ headers: {
                "Content-Type": "application/json",
            }, method: "POST", path: "/api/deploy", host: uv.options.host }, (uv.options.port ? { port: uv.options.port } : {})), (uv.options.cert ? { cert: uv.options.port } : {})), (uv.options.rejectUnauthorized
            ? { port: uv.options.rejectUnauthorized }
            : {})), (uv.options.ca ? { port: uv.options.ca } : {})), (res) => {
            let data = "";
            res.on("data", (chunk) => {
                data += chunk;
                res.on("end", () => {
                    if (!data.toString().startsWith('"Success!')) {
                        throw new Error(data.toString());
                    }
                    const unforgeableId = data.toString().slice(data.toString().indexOf(': ') + 2).replace('"', '');
                    if (typeof timeout === "number") {
                        let s = new Date().getTime();
                        let ongoning = false;
                        const interval = setInterval(() => __awaiter(void 0, void 0, void 0, function* () {
                            if (ongoning) {
                                return;
                            }
                            ongoning = true;
                            if (new Date().getTime() - timeout > s) {
                                clearInterval(interval);
                                throw new Error("TIMEOUT");
                            }
                            const dan = yield (0, exports.dataAtName)(urlOrOptions, {
                                name: {
                                    UnforgDeploy: { data: unforgeableId },
                                },
                                depth: 3,
                            });
                            if (dan &&
                                JSON.parse(dan) &&
                                JSON.parse(dan).exprs &&
                                JSON.parse(dan).exprs.length) {
                                resolve(dan);
                                clearInterval(interval);
                            }
                            ongoning = false;
                        }), 4000);
                    }
                    else {
                        resolve(data);
                    }
                });
            });
        });
        req.write(JSON.stringify(options));
        req.end();
        req.on("error", (e) => {
            reject(e);
        });
    });
});
exports.deploy = deploy;
const easyDeploy = (urlOrOptions, payload) => __awaiter(void 0, void 0, void 0, function* () {
    let urlValidated;
    if (typeof urlOrOptions === "string") {
        urlValidated = validateUrl({ url: urlOrOptions });
    }
    else {
        urlValidated = validateUrl(urlOrOptions);
    }
    const uv = urlValidated;
    let phloPriceOk = 1;
    if (payload.phloPrice === 'auto') {
        phloPriceOk = JSON.parse(yield (0, exports.status)(urlOrOptions)).minPhloPrice;
    }
    else {
        phloPriceOk = payload.phloPrice;
    }
    const publicKey = (0, utils_1.publicKeyFromPrivateKey)(payload.privateKey);
    const vab = (yield (0, exports.validAfterBlockNumber)(urlOrOptions)) || -1;
    const d = new Date().valueOf();
    const options = (0, utils_1.getDeployOptions)({
        timestamp: d,
        term: payload.term,
        shardId: payload.shardId,
        privateKey: payload.privateKey,
        phloPrice: phloPriceOk,
        phloLimit: payload.phloLimit,
        validAfterBlockNumber: vab
    });
    let timeout = payload.timeout || undefined;
    if (typeof timeout === 'number') {
        if ((payload.term || '').indexOf("(`rho:rchain:deployId`)") === -1) {
            console.warn('timeout is set and term does not include (`rho:rchain:deployId`), data-at-name may not work');
        }
    }
    return new Promise((resolve, reject) => {
        const req = uv.lib.request(Object.assign(Object.assign(Object.assign(Object.assign({ headers: {
                "Content-Type": "application/json",
            }, method: "POST", path: "/api/deploy", host: uv.options.host }, (uv.options.port ? { port: uv.options.port } : {})), (uv.options.cert ? { cert: uv.options.port } : {})), (uv.options.rejectUnauthorized
            ? { port: uv.options.rejectUnauthorized }
            : {})), (uv.options.ca ? { port: uv.options.ca } : {})), (res) => {
            let data = "";
            res.on("data", (chunk) => {
                data += chunk;
                res.on("end", () => {
                    if (!data.toString().startsWith('"Success!')) {
                        throw new Error(data.toString());
                    }
                    const unforgeableId = data.toString().slice(data.toString().indexOf(': ') + 2).replace('"', '');
                    if (typeof timeout === "number") {
                        let s = new Date().getTime();
                        let ongoning = false;
                        const interval = setInterval(() => __awaiter(void 0, void 0, void 0, function* () {
                            if (ongoning) {
                                return;
                            }
                            ongoning = true;
                            if (new Date().getTime() - timeout > s) {
                                clearInterval(interval);
                                throw new Error("TIMEOUT");
                            }
                            const dan = yield (0, exports.dataAtName)(urlOrOptions, {
                                name: {
                                    UnforgDeploy: { data: unforgeableId },
                                },
                                depth: 3,
                            });
                            if (dan &&
                                JSON.parse(dan) &&
                                JSON.parse(dan).exprs &&
                                JSON.parse(dan).exprs.length) {
                                resolve(dan);
                                clearInterval(interval);
                            }
                            ongoning = false;
                        }), 4000);
                    }
                    else {
                        resolve(data);
                    }
                });
            });
        });
        req.write(JSON.stringify(options));
        req.end();
        req.on("error", (e) => {
            reject(e);
        });
    });
});
exports.easyDeploy = easyDeploy;
const status = (urlOrOptions) => {
    let urlValidated;
    if (typeof urlOrOptions === "string") {
        urlValidated = validateUrl({ url: urlOrOptions });
    }
    else {
        urlValidated = validateUrl(urlOrOptions);
    }
    const uv = urlValidated;
    return new Promise((resolve, reject) => {
        const req = uv.lib.request(Object.assign(Object.assign(Object.assign(Object.assign({ headers: {
                "Content-Type": "application/json",
            }, method: "GET", path: "/api/status", host: uv.options.host }, (uv.options.port ? { port: uv.options.port } : {})), (uv.options.cert ? { cert: uv.options.cert } : {})), (uv.options.rejectUnauthorized
            ? { rejectUnauthorized: uv.options.rejectUnauthorized }
            : {})), (uv.options.ca ? { ca: uv.options.ca } : {})), (res) => {
            let data = "";
            res.on("data", (chunk) => {
                data += chunk;
                res.on("end", () => {
                    resolve(data);
                });
            });
        });
        req.end();
        req.on("error", (e) => {
            reject(e);
        });
    });
};
exports.status = status;
// ==============
// Valid after block number
// ==============
const validAfterBlockNumber = (urlOrOptions) => __awaiter(void 0, void 0, void 0, function* () {
    let validAfterBlockNumberResponse;
    validAfterBlockNumberResponse = JSON.parse(yield (0, exports.blocks)(urlOrOptions, {
        position: 1,
    }))[0].blockNumber;
    return validAfterBlockNumberResponse;
});
exports.validAfterBlockNumber = validAfterBlockNumber;
const exploreDeploy = (urlOrOptions, options) => {
    let urlValidated;
    if (typeof urlOrOptions === "string") {
        urlValidated = validateUrl({ url: urlOrOptions });
    }
    else {
        urlValidated = validateUrl(urlOrOptions);
    }
    const uv = urlValidated;
    return new Promise((resolve, reject) => {
        const req = uv.lib.request(Object.assign(Object.assign(Object.assign(Object.assign({ headers: {
                "Content-Type": "application/json",
            }, method: "POST", path: "/api/explore-deploy", host: uv.options.host }, (uv.options.port ? { port: uv.options.port } : {})), (uv.options.cert ? { cert: uv.options.cert } : {})), (uv.options.rejectUnauthorized
            ? { rejectUnauthorized: uv.options.rejectUnauthorized }
            : {})), (uv.options.ca ? { ca: uv.options.ca } : {})), (res) => {
            let data = "";
            res.on("data", (chunk) => {
                data += chunk;
                res.on("end", () => {
                    resolve(data);
                });
            });
        });
        req.write(options.term);
        req.end();
        req.on("error", (e) => {
            reject(e);
        });
    });
};
exports.exploreDeploy = exploreDeploy;
const blocks = (urlOrOptions, options) => {
    return new Promise((resolve, reject) => {
        let urlValidated;
        if (typeof urlOrOptions === "string") {
            urlValidated = validateUrl({ url: urlOrOptions });
        }
        else {
            urlValidated = validateUrl(urlOrOptions);
        }
        const uv = urlValidated;
        const req = urlValidated.lib.request(Object.assign(Object.assign(Object.assign(Object.assign({ headers: {
                "Content-Type": "application/json",
            }, method: "GET", path: "/api/blocks/" + options.position, host: uv.options.host }, (uv.options.port ? { port: uv.options.port } : {})), (uv.options.cert ? { cert: uv.options.cert } : {})), (uv.options.rejectUnauthorized
            ? { rejectUnauthorized: uv.options.rejectUnauthorized }
            : {})), (uv.options.ca ? { ca: uv.options.ca } : {})), (res) => {
            let data = "";
            res.on("data", (chunk) => {
                data += chunk;
                res.on("end", () => {
                    resolve(data);
                });
            });
        });
        req.end();
        req.on("error", (e) => {
            reject(e);
        });
    });
};
exports.blocks = blocks;
const prepareDeploy = (urlOrOptions, options) => {
    let urlValidated;
    if (typeof urlOrOptions === "string") {
        urlValidated = validateUrl({ url: urlOrOptions });
    }
    else {
        urlValidated = validateUrl(urlOrOptions);
    }
    const uv = urlValidated;
    return new Promise((resolve, reject) => {
        const req = uv.lib.request(Object.assign(Object.assign(Object.assign(Object.assign({ headers: {
                "Content-Type": "application/json",
            }, method: "POST", path: "/api/prepare-deploy", host: uv.options.host }, (uv.options.port ? { port: uv.options.port } : {})), (uv.options.cert ? { cert: uv.options.cert } : {})), (uv.options.rejectUnauthorized
            ? { rejectUnauthorized: uv.options.rejectUnauthorized }
            : {})), (uv.options.ca ? { ca: uv.options.ca } : {})), (res) => {
            let data = "";
            res.on("data", (chunk) => {
                data += chunk;
                res.on("end", () => {
                    resolve(data);
                });
            });
        });
        req.write(JSON.stringify(options));
        req.end();
        req.on("error", (e) => {
            reject(e);
        });
    });
};
exports.prepareDeploy = prepareDeploy;
const dataAtName = (urlOrOptions, options) => {
    let urlValidated;
    if (typeof urlOrOptions === "string") {
        urlValidated = validateUrl({ url: urlOrOptions });
    }
    else {
        urlValidated = validateUrl(urlOrOptions);
    }
    const uv = urlValidated;
    return new Promise((resolve, reject) => {
        const req = uv.lib.request(Object.assign(Object.assign(Object.assign(Object.assign({ headers: {
                "Content-Type": "application/json",
            }, method: "POST", path: "/api/data-at-name", host: uv.options.host }, (uv.options.port ? { port: uv.options.port } : {})), (uv.options.cert ? { cert: uv.options.cert } : {})), (uv.options.rejectUnauthorized
            ? { rejectUnauthorized: uv.options.rejectUnauthorized }
            : {})), (uv.options.ca ? { ca: uv.options.ca } : {})), (res) => {
            let data = "";
            res.on("data", (chunk) => {
                data += chunk;
                res.on("end", () => {
                    resolve(data);
                });
            });
        });
        req.write(JSON.stringify(options));
        req.end();
        req.on("error", (e) => {
            reject(e);
        });
    });
};
exports.dataAtName = dataAtName;
const dataAtNameByBlockHash = (urlOrOptions, options) => {
    let urlValidated;
    if (typeof urlOrOptions === "string") {
        urlValidated = validateUrl({ url: urlOrOptions });
    }
    else {
        urlValidated = validateUrl(urlOrOptions);
    }
    const uv = urlValidated;
    return new Promise((resolve, reject) => {
        const req = uv.lib.request(Object.assign(Object.assign(Object.assign(Object.assign({ headers: {
                "Content-Type": "application/json",
            }, method: "POST", path: "/api/data-at-name-by-block-hash", host: uv.options.host }, (uv.options.port ? { port: uv.options.port } : {})), (uv.options.cert ? { cert: uv.options.cert } : {})), (uv.options.rejectUnauthorized
            ? { rejectUnauthorized: uv.options.rejectUnauthorized }
            : {})), (uv.options.ca ? { ca: uv.options.ca } : {})), (res) => {
            let data = "";
            res.on("data", (chunk) => {
                data += chunk;
                res.on("end", () => {
                    resolve(data);
                });
            });
        });
        req.write(JSON.stringify(options));
        req.end();
        req.on("error", (e) => {
            reject(e);
        });
    });
};
exports.dataAtNameByBlockHash = dataAtNameByBlockHash;
//# sourceMappingURL=http.js.map